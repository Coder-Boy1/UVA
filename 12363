#include <bits/stdc++.h>
 
using namespace std;

#define int long long

#define N 100005




int tim=0;
int u[N], v[N], vis[N];
int tin[N], tout[N], isBridge[N], minAncestor[N];
vector< pair < int, int > > a[N]; //vertex, index of edge

void dfs(int k, int par)
{
        vis[k]=1;
        tin[k]=++tim;
        minAncestor[k]=tin[k];
        for(auto it:a[k])
        {
                if(it.first==par)
                        continue;
                if(vis[it.first])
                {        
                        minAncestor[k]=min(minAncestor[k], tin[it.first]);
                        continue;
                }
                dfs(it.first, k);
                minAncestor[k]=min(minAncestor[k], minAncestor[it.first]);
                if(minAncestor[it.first]>tin[k])
                        isBridge[it.second]=1;
        }
        tout[k]=tim;
}


void fun(int n, int m)
{
        tim=0;
        for(int i=0;i<=n;i++)
        {
                vis[i]=0;
                a[i].clear();
                u[i]=v[i]=0;
                tin[i]=tout[i]=0;
                minAncestor[i]=0;
        }
        for(int i=0;i<=m;i++)
                isBridge[i]=0;

}


int size[N]={0},parent[N]={0};

int root(int i)
    {
        while(parent[ i ] != i)
        {
                i = parent[ i ];
        }
        return i;
    }

void union1(int A,int B)
{
        int root_A = root(A);
        int root_B = root(B),i;
        if(root_A==root_B)
                return ;
        if(size[root_A] < size[root_B ])
        {
                parent[ root_A ] = parent[root_B];
                size[root_B] += size[root_A];
        }
        else
        {
                parent[ root_B ] = parent[root_A];
                size[root_A] += size[root_B];
        }
}

bool find(int A,int B)
{
        if( root(A)==root(B) )
        return true;
        else
        return false;
}

void fun1(int n)
{
        int i;
        for(i=0;i<=n;i++)
        {
                parent[i]=i;
                size[i]=1;
        }
}


int32_t main()
{
        while(1)
        {
                int n, m, q;
                cin>>n>>m>>q;
                if(n==0)
                        break;
                fun(n, m);
                fun1(n);
                vector < pair < int , int > > edges;
                for(int i=0;i<m;i++)
                {
                        int t1, t2;
                        cin>>t1>>t2;
                        edges.push_back({t1,t2});
                        a[t1].push_back({t2,i+1});
                        a[t2].push_back({t1,i+1});
                }

                for(int i=1;i<=n;i++)
                {
                        if(vis[i]==0)
                                dfs(i,0);
                }
                
                for(int i=0;i<m;i++)
                {
                        if(isBridge[i+1]==1)
                        {
                                int t1=edges[i].first;
                                int t2=edges[i].second;

                                union1(t1,t2);
                        }
                }

                for(int i=0;i<q;i++)
                {
                        int t1, t2;
                        cin>>t1>>t2;

                        if(root(t1)==root(t2))
                                cout<<"Y"<<endl;
                        else
                                cout<<"N"<<endl;
                }
                cout<<"-"<<endl;
        }
        return 0;
}
