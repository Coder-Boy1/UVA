// Normal Knapsack type DP

#include <bits/stdc++.h>

using namespace std;

#define ll long long

#define mod 1000000007

ll gcd(ll aa,ll bb) { if(aa==0) return bb; return(bb%aa,aa); }

int dp[500][10005]={0};
int dp1[500][10005]={0};


void fun()
{
    for(int i=1;i<500;i++)
    {
        for(int j=0;j<=10005;j++)
        {
            dp[i][j]=0;
            dp1[i][j]=0;
        }
    }

}
int main()
{
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);

    int n,m;

    while(cin>>n)
    {
        cin>>m;

        int d=n+m;
        vector < int > a(d);
        int sum=0;
        for(int i=0;i<d;i++)
        {
            cin>>a[i];
            sum+=a[i];
            a[i]+=50;
        }
        fun();
        dp[1][a[0]]=1;
        for(int i=1;i<d;i++)
        {
            
            for(int j=1;j<=n;j++)
            {
                for(int k=0;k<10005;k++)
                {
                    dp1[j][k]=dp[j][k];
                    if(k-a[i] < 0 || j==1)
                    continue;
                    if(dp[j-1][k-a[i]]==1)
                    dp1[j][k]=1;
                }
            }
            dp1[1][a[i]] = 1;
            
            for(int j=1;j<=n;j++)
            {
                for(int k=0;k<10005;k++)
                {
                    dp[j][k]=dp1[j][k];   
                }
            }

        }
        int mini=1000000,maxi=-1000000;
        for(int k=0;k<=10000;k++)
        {
            if(dp[n][k]==1)
            {
            
                int k1=k-(n*50);
                int temp=sum-k1;

                mini=min(mini,temp*k1);
                maxi=max(maxi,temp*k1);
            }
        }
        cout<<maxi<<" "<<mini<<endl;
    }
    return 0;
}
